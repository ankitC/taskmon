package com.example.taskmon;

import java.io.BufferedReader;
import java.io.FileReader;
import java.util.HashMap;
import java.util.Iterator;
import java.util.Map.Entry;

import android.app.Activity;
import android.graphics.Color;
import android.os.Bundle;
import android.os.Handler;
import android.util.Log;
import android.view.Menu;
import android.widget.LinearLayout;

import com.jjoe64.graphview.GraphView;
import com.jjoe64.graphview.GraphView.GraphViewData;
import com.jjoe64.graphview.LineGraphView;

public class ViewGraphs extends Activity {

	// public static double systime = System.currentTimeMillis();

	public static GraphView graphView;
	//private int pid = 2036;
	//private double t;
	private Runnable mTimer;
	public static int index;
	public static int timeCounter;
	private Handler handler = new Handler();
	//private long period;
	//private GraphViewSeries dataSeries;

	public String debug = "TEAM11";

	@Override
	protected void onCreate(Bundle savedInstanceState) {
		super.onCreate(savedInstanceState);
		setContentView(R.layout.activity_view_graphs);
		graphView = new LineGraphView(this, "Utilization Graphs");
		graphView.setViewPort(0, 10);	
		graphView.setScrollable(true);
		graphView.scrollToEnd();
		graphView.setManualYAxis(true);
		graphView.setManualYAxisBounds(1, 0);
		//graphView.setScalable(true);
		LinearLayout layout = (LinearLayout) findViewById(R.id.graph);
		//dataSeries = new GraphViewSeries(new GraphViewData[]{new GraphViewData(0, 0.0d)});
		layout.addView(ViewGraphs.graphView);

		mTimer = new Runnable() {
			@Override
			public void run() {


				double time = System.currentTimeMillis() - MainActivity.startTime;
				double dataPoint = 0;
				
				//Map<String, ArrayList<String>> a = new LinkedHashMap<String, ArrayList<String>>();
				Iterator<Observer> itr = SetReserveActivity.pidMap.values().iterator();
				while (itr.hasNext()) {
					Observer reservation = itr.next();
				    //Entry<Integer, Observer> entry = itr.next();
				    
					//Observer reservation1=( (Entry<Integer, Observer>) itr).getValue();
					//Double t= SetReserveActivity.pidTMap.get(pid);
					
					{
						String filenameUtil = "/sys/rtes/tasks/" + reservation.getPid() + "/util";
						String filenameOverflow = "/sys/rtes/tasks/" + reservation.getPid() + "/overflow";
						String data = null;
						try 
						{

							BufferedReader brOverflow = new BufferedReader(new FileReader(
									filenameOverflow));

							BufferedReader brUtil = new BufferedReader(new FileReader(
									filenameUtil));
							data = brUtil.readLine();

							// Detecting Overflow
							if ((data == null) || (Integer.parseInt(brOverflow.readLine()) == 1)) 
							{
								dataPoint = 0.0;
							}
							else
							{
								dataPoint = Double.parseDouble(data);

							}
							brOverflow.close();
							brUtil.close();
							double plotPoint = dataPoint / reservation.getT();
							//Log.w(debug, "datapoint:"+dataPoint+ " Cutrrent systime:"+System.currentTimeMillis());
							Log.w(debug, "C:"+dataPoint+"  T:"+reservation.getT()+" plotpoint" + plotPoint);
							//double time = System.currentTimeMillis() - MainActivity.startTime;
							reservation.dataSeries.appendData(
									new GraphViewData(time/1000,plotPoint), true, 100);
							if (reservation1.colorIndex++ % 2 == 0 )
							reservation1.dataSeries.getStyle().color = Color.RED;
							else
							reservation1.dataSeries.getStyle().color = Color.BLUE ;
							ViewGraphs.graphView.addSeries(reservation1.dataSeries);
						} 
						catch (Exception e) 
						{
							e.printStackTrace();
						}
					}
				}
				Log.w(debug, "****Handler call back*****"+(SetReserveActivity.findMax()/1000000));
				handler.postDelayed(this, (long) (SetReserveActivity.findMax()/1000000));
			}
		};
	}

	@Override
	public boolean onCreateOptionsMenu(Menu menu) {
		// Inflate the menu; this adds items to the action bar if it is present.
		getMenuInflater().inflate(R.menu.view_graphs, menu);
		return true;
	}

	protected void onResume() {
		super.onResume();

		handler.postDelayed(mTimer, 0);
	}

}
