package com.example.taskmon;

import java.io.BufferedReader;
import java.io.FileReader;
import java.util.Iterator;

import android.app.IntentService;
import android.app.Service;
import android.content.Intent;
import android.os.IBinder;
import android.support.v4.content.LocalBroadcastManager;
import android.util.Log;

public class DataCollector extends Service{


	@Override
	public  int  onStartCommand(Intent intent, int flags, int startID) {
		
		Iterator<Observer> observerItr =  SetReserveActivity.pidMap.values().iterator();
		Log.w(SetReserveActivity.debug,"In Service");
		
		while (observerItr.hasNext()) {	
			Observer reservation = observerItr.next();
		//	Log.w(SetReserveActivity.debug,"Pid "+ reservation.getPid()+" time counter "+ViewGraphs.timeCounter+" T "+((int)(reservation.getT()/1000000000)));
			String filenameUtil = "/sys/rtes/tasks/" + reservation.getPid() + "/util";
			String filenameOverflow = "/sys/rtes/tasks/" + reservation.getPid() + "/overflow";
			String data = null;
		
			reservation.getDataPoints().clear();
		
			while(true){
				try {
					BufferedReader brOverflow = new BufferedReader(new FileReader(filenameOverflow));
					BufferedReader brUtil = new BufferedReader(new FileReader(filenameUtil));
					data = brUtil.readLine();	
	//				Log.w(SetReserveActivity.debug,"In On Create: Data="+data);
			
					if(data == null)
						break;
	/*				if(Integer.parseInt(brOverflow.readLine()) == 1){
						reservation.getDataPoints().add(new Double(0));
						break;
					}*/
					reservation.getDataPoints().add(new Double(Double.parseDouble(data)));
					brOverflow.close();
					brUtil.close();
				} catch (Exception e) {
					// TODO Auto-generated catch block
					e.getCause();
				}
			}
		}
		
//		Log.w(SetReserveActivity.debug,"FinishedServiceIteration");
		Intent returnIntent =  new Intent("com.example.taskmon");
		LocalBroadcastManager.getInstance(this).sendBroadcast(returnIntent);
		return Service.START_STICKY;
	}

	@Override
	public IBinder onBind(Intent intent) {
		// TODO Auto-generated method stub
		return null;
	}

}
