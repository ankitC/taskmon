package com.example.taskmonv2;

import java.text.DecimalFormat;
import java.util.Iterator;
import java.util.LinkedHashMap;

import android.app.Activity;
import android.app.AlarmManager;
import android.app.PendingIntent;
import android.content.BroadcastReceiver;
import android.content.Context;
import android.content.Intent;
import android.content.IntentFilter;
import android.content.pm.ActivityInfo;
import android.graphics.Color;
import android.os.Bundle;
import android.os.SystemClock;
import android.support.v4.content.LocalBroadcastManager;
import android.util.Log;
import android.view.View;
import android.view.View.OnClickListener;
import android.widget.EditText;
import android.widget.LinearLayout;
import android.widget.Toast;

import com.jjoe64.graphview.GraphView;
import com.jjoe64.graphview.GraphView.GraphViewData;
import com.jjoe64.graphview.LineGraphView;

public class MainActivity extends Activity {

	private int pid;
	private int cSec;
	private long cNsec;
	private int tSec;
	private long tNsec;
	private int prio;

	private EditText ePid;
	private EditText eCsec;
	private EditText eCnsec;
	private EditText eTsec;
	private EditText eTnsec;
	private EditText ePrio;

	public BroadcastReceiver b;
	public AlarmManager am;
	public PendingIntent pi;

	public static double startTime;
	public static String debug = "TEAM11";
	public static long refreshInterval = 1000;
	public boolean referenceTimeSet = false;
	public static LinkedHashMap<Integer, Observer> pidMap = new LinkedHashMap<Integer, Observer>();
	public static GraphView graphView;
	public static int color[] = { Color.GRAY, Color.RED, Color.BLUE,
		Color.GREEN, Color.BLACK, };
	public boolean timerStarted = false;
	public boolean initialized = false;

	@Override
	protected void onCreate(Bundle savedInstanceState) {
		super.onCreate(savedInstanceState);
		setContentView(R.layout.activity_main);
		System.loadLibrary("reservationFramework");

		if (!referenceTimeSet) {
			startTime = System.currentTimeMillis();
			referenceTimeSet = true;
		}

		graphView = new LineGraphView(this, "Utilization Graphs");
		graphView.setViewPort(0, 10);
		graphView.setScrollable(true);
		//	graphView.scrollToEnd();
		graphView.setManualYAxis(true);
		graphView.setManualYAxisBounds(1, 0);
		graphView.getGraphViewStyle().setHorizontalLabelsColor(Color.BLACK);
		graphView.getGraphViewStyle().setVerticalLabelsColor(Color.BLACK);
		graphView.getGraphViewStyle().setNumHorizontalLabels(10);
		graphView.getGraphViewStyle().setVerticalLabelsWidth(40);
		//graphView.getGraphViewStyle().setTextSize(10);

		LinearLayout layout = (LinearLayout) findViewById(R.id.graph);
		layout.addView(MainActivity.graphView);



		if(!timerStarted){
			this.startDataCollector(MainActivity.refreshInterval);
			Log.w(debug, "****Starting Service****");
			timerStarted=true;
			Log.w(debug, "****Registering CallbackReceiver*****");
			ResponseReceiver dataPointsReceiver = new ResponseReceiver();
			this.b = dataPointsReceiver;
			LocalBroadcastManager.getInstance(this).registerReceiver(dataPointsReceiver, new IntentFilter("com.example.taskmonv2"));
			Log.w(debug, "****Finished registering receiver*****");
		}
		initialized= true;

		findViewById(R.id.setReserveButton).setOnClickListener(
				new OnClickListener() {
					public void onClick(View v) {
						// TODO Auto-generated method stub
						// MainActivity.callSetReserve();
						ePid = ((EditText) findViewById(R.id.pid));
						eCsec = ((EditText) findViewById(R.id.cSec));
						eCnsec = ((EditText) findViewById(R.id.cNs));
						eTsec = ((EditText) findViewById(R.id.tSec));
						eTnsec = ((EditText) findViewById(R.id.tNs));
						ePrio = ((EditText) findViewById(R.id.prio));

						pid = Integer.parseInt((ePid.getText().toString()));
						cSec = Integer.parseInt(eCsec.getText().toString());
						cNsec = Long.parseLong(eCnsec.getText().toString());
						tSec = Integer.parseInt(eTsec.getText().toString());
						tNsec = Long.parseLong(eTnsec.getText().toString());
						prio = Integer.parseInt(ePrio.getText().toString());

						int retVal = setReserve(pid, cSec, cNsec, tSec, tNsec,
								prio);
						if (retVal == 0) {
							Toast success = Toast.makeText(
									getApplicationContext(),	"Reservation Set on pid:" + pid, Toast.LENGTH_SHORT);
							success.show();

							double t = ((double) tSec * 1000000000) + tNsec;
							Log.w(debug, "T set= " + t);
							if (!pidMap.containsKey(pid)) {
								Observer taskObserver = new Observer(pid, t);
								pidMap.put(pid, taskObserver);
							}
						} else {
							Toast failed = Toast.makeText(getApplicationContext(),"Reservation could not be set",	Toast.LENGTH_SHORT);
							failed.show();
						}
					}
				});

		findViewById(R.id.cancelReserveButton).setOnClickListener(
				new OnClickListener() {
					public void onClick(View v) {
						// TODO Auto-generated method stub
						ePid = ((EditText) findViewById(R.id.pid));
						pid = Integer.parseInt((ePid.getText().toString()));
						if (MainActivity.pidMap.containsKey(pid)) {
							MainActivity.pidMap.remove(pid);
						}
						int retVal = cancelReserve(pid);
						if (retVal == 0) {
							Toast success = Toast.makeText(
									getApplicationContext(),
									"Reservation Cancelled on pid:" + pid,
									Toast.LENGTH_LONG);
							success.show();
						} else {
							Toast failed = Toast.makeText(getApplicationContext(),"Reservation could not be cleaned.",Toast.LENGTH_LONG);
							failed.show();
						}
					}

				});
	}


	// Broadcast receiver for receiving status updates from the IntentService
	private class ResponseReceiver extends BroadcastReceiver {
		public ResponseReceiver() {
		}

		// Called when the BroadcastReceiver gets an Intent it's registered to
		// receive
		public void onReceive(Context context, Intent intent) {
			Log.w(debug, "****Received the broadCast*****");

			double time = System.currentTimeMillis() - MainActivity.startTime;
			Iterator<Observer> itr = MainActivity.pidMap.values().iterator();
			// Log.w(debug, "****Going into while*****");

			while (itr.hasNext()) {
				Observer reservation = itr.next();
				reservation.getDataSeries().getStyle().color = color[reservation
				                                                     .getColor()];
				for (int i = 0; i < reservation.getDataPoints().size(); i++) {

					double plotPoint = (double) reservation.getDataPoints().get(i) / reservation.t;

					double plotTime = time
							+ (double) (MainActivity.refreshInterval * i)/ reservation.getDataPoints().size();
					plotTime = Double.parseDouble(new DecimalFormat("##.##")	.format((double) plotTime / 5000));
					Log.w(debug, "PlotPoint:" + plotPoint + "    plotTime:"+ plotTime);
					reservation.getDataSeries().appendData(new GraphViewData(plotTime, plotPoint), true, 1000);
				}
				MainActivity.graphView.addSeries(reservation.getDataSeries());
			}
		}
	}

	private void startDataCollector(long refreshInterval){
		Log.w(debug, "****StartingDataCollector*****");
		am=(AlarmManager)getApplicationContext().getSystemService(Context.ALARM_SERVICE);
		Intent i = new Intent(getApplicationContext(), DataCollector.class);
		pi = PendingIntent.getService(getApplicationContext(), 0, i, 0);
		am.setRepeating(AlarmManager.ELAPSED_REALTIME_WAKEUP, SystemClock.elapsedRealtime(), refreshInterval , pi); // Millisec * Second * Minute
	}

	/* Set and Cancel Reserve Native Methods for JNI */
	private static native int setReserve(int pid, int cSec, long cNsec,
			int tSec, long tNsec, int prio);

	private static native int cancelReserve(int pid);

	protected void onDestroy() {
		// TODO Auto-generated method stub
		super.onDestroy();
		Log.i(debug, "On Destroy .....");
		LocalBroadcastManager.getInstance(this).registerReceiver(this.b, new IntentFilter("com.example.taskmonv2"));

	}

}
